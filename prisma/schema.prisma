// schema.prisma

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["jsonProtocol"]
}

datasource db {
  provider          = "postgresql"
  url               = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl         = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
  shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING") // used for migrations
}

enum PeopleType {
  PHOTO
  PROP
  SEW
  WIG
}

model Review {
  id            Int    @id @default(autoincrement())
  revieweeId    Int    @map("reviewee_id")
  reviewerId    Int    @map("reviewer_id")
  description   String
  quality       Int       @default(1)
  communication Int       @default(1)
  cost          Int       @default(0)
  location      String?
  isAnonymous   Boolean   @default(false) @map("is_anonymous")
  isApproved    Boolean   @default(false) @map("is_approved")
  orderedAt     DateTime  @map("ordered_at") @db.Date
  receivedAt    DateTime  @map("received_at") @db.Date
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  deletedAt     DateTime? @map("deleted_at")

  reviewer User             @relation(fields: [reviewerId], references: [id])
  reviewee ReviewablePeople @relation(fields: [revieweeId], references: [id])

  @@map("reviews")
}

model ReviewablePeople {
  id              Int     @id @default(autoincrement())
  submitterId     Int?    @map("submitter_id")
  userId          Int?    @map("user_id")
  name            String
  type            PeopleType
  location        String?
  socialFacebook  String?    @map("social_facebook")
  socialInstagram String?    @map("social_instagram")
  socialTwitter   String?    @map("social_twitter")
  socialWebsite   String?    @map("social_website")
  avgCost         Int        @default(-1) @map("avg_cost")
  avgTurnaround  Int        @default(-1) @map("avg_turnaround")
  avgQuality      Int        @default(-1) @map("avg_quality")
  avgCommunication  Int        @default(-1) @map("avg_communication")
  isApproved      Boolean    @default(false) @map("is_approved")
  createdAt       DateTime   @default(now()) @map("created_at")
  updatedAt       DateTime   @updatedAt @map("updated_at")
  deletedAt       DateTime?  @map("deleted_at")
  reviews Review[]

  user   User?    @relation(fields: [userId], references: [id])

  @@map("reviewable_people")
}

model User {
  id        Int             @id @default(autoincrement())
  role      String          @default("user")
  name      String?
  email     String?            @unique
  emailVerified DateTime?
  createdAt DateTime           @default(now()) @map("created_at")
  updatedAt DateTime           @updatedAt @map("updated_at")
  reviews   Review[]
  reviewAccounts  ReviewablePeople[]
  image         String?
  accounts      Account[]
  sessions      Session[]

  @@map("users")
}

model Account {
  id                 Int  @id @default(autoincrement())
  userId             Int  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields:[userId], references:[id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           Int   @id @default(autoincrement())
  sessionToken String   @unique @map("session_token")
  userId       Int   @map("user_id")
  expires      DateTime
  user         User     @relation(fields:[userId], references:[id], onDelete: Cascade)
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
